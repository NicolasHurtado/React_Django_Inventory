from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from io import BytesIO
from django.core.mail import EmailMessage
from django.conf import settings
import tempfile
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


def generate_inventory_pdf_for_email(inventory_data, company_name):
    """
    Generate an elegant PDF with the inventory information using ReportLab.
    Returns the path to a temporary file with the PDF.
    """
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Create elements for the PDF
    elements = []
    
    # Title
    title_style = styles["Heading1"]
    title_style.alignment = 1  # Centered
    elements.append(Paragraph(f"Inventory of {company_name}", title_style))
    elements.append(Spacer(1, 20))
    
    # Date
    date_style = styles["Normal"]
    date_style.alignment = 1  # Centered
    elements.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", date_style))
    elements.append(Spacer(1, 30))
    
    # Resumen
    elements.append(Paragraph(f"Total products in inventory: {len(inventory_data)}", styles["Normal"]))
    elements.append(Spacer(1, 20))
    
    # Data for the table
    data = [["ID", "Product", "Code", "Quantity", "Date"]]
    
    for item in inventory_data:
        data.append([
            str(item.id),
            item.product.name,
            item.product.code,
            str(item.quantity),
            item.created_at.strftime("%d/%m/%Y %H:%M")
        ])
    
    # Create the table
    table = Table(data, repeatRows=1)
    
    # Table style
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
        ('TOPPADDING', (0, 1), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
    ]))
    
    elements.append(table)
    elements.append(Spacer(1, 30))
    
    # Footer
    footer_style = styles["Normal"]
    footer_style.alignment = 1  # Centered
    footer_style.fontSize = 8
    elements.append(Paragraph("This document was automatically generated by the inventory system.", footer_style))
    elements.append(Paragraph(f"© {datetime.now().year} {company_name} - All rights reserved", footer_style))
    
    # Generate the PDF
    doc.build(elements)
    
    # Create a temporary file
    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
        temp_file.write(buffer.getvalue())
        return temp_file.name


def send_inventory_email(email, pdf_path, company_name):
    """
    Envía el PDF del inventario por correo electrónico.
    """
    subject = f'Inventory of {company_name}'
    message = f'Please find attached the inventory of {company_name}.'
    
    logger.info(f"Sending email to {email} with subject {subject} and message {message}")
    
    # Create the HTML body of the email
    html_message = f"""
    <html>
    <body>
        <h2>Inventory Report</h2>
        <p>Dear user,</p>
        <p>Please find attached the inventory report for <strong>{company_name}</strong>.</p>
        <p>This is an automated message, please do not reply.</p>
        <hr>
        <p style="font-size: small; color: gray;">© {datetime.now().year} - Lite Thinking Inventory System</p>
    </body>
    </html>
    """
    
    # Create the EmailMessage object
    email_message = EmailMessage(
        subject=subject,
        body=html_message,
        from_email=settings.DEFAULT_FROM_EMAIL,
        to=[email]
    )
    
    # Set the content as HTML
    email_message.content_subtype = "html"
    
    # Attach the PDF
    with open(pdf_path, 'rb') as f:
        email_message.attach('inventory.pdf', f.read(), 'application/pdf')
    
    # Send the email
    email_message.send(fail_silently=False)
    
    logger.info(f"Email sent successfully to {email}")


def generate_inventory_pdf(inventory_queryset):
    """Generate inventory PDF using ReportLab for download"""
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    y = height - 40
    p.setFont("Helvetica-Bold", 14)
    p.drawString(40, y, "Inventory Report")
    y -= 30
    p.setFont("Helvetica", 10)
    for inv in inventory_queryset:
        # Divide the long text into components to avoid too long lines
        company_info = f"Company: {inv.company.name}"
        product_info = f"Product: {inv.product.name}"
        quantity_info = f"Quantity: {inv.quantity}"
        date_info = f"Date: {inv.created_at.strftime('%Y-%m-%d %H:%M')}"

        # Combine the components with separators
        text = f"{company_info} | {product_info} | {quantity_info} | {date_info}"
        p.drawString(40, y, text)
        y -= 20
        if y < 40:
            p.showPage()
            y = height - 40
    p.save()
    buffer.seek(0)
    return buffer
